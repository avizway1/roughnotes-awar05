EC2 : 

1. On-Demand Instances : Unpredictable workloads.. or shortterm testing purpuses..
	--> No Commitment with AWS
	--> Pay-as-you-go Model : Pay for the resources you actually uses
	--> /sec billing (Minimum 60 sec)..

2. Reserved Instances : suitable for "Predictable workloads" for lobger duration (1 Yr - 3 Yrs)

	--> Standard RI : No config changes allowed.
	--> Convertible : Confi changes can be modified (Instance family / OS)

Payment Option:

	--> Full Upfront : Pay 100% upfront.
	--> Partial upfront : Pay 30-50% upfront, Remaining Monthly basis.. With "Redused hourly price".. 
	--> No upfront : Pay entirely on monthly basis.. 

--> We can sell instance in AWS marketplace, if we dont want to use it anymore.

3. Spot Instances : For Flexible workloads with "NO Critical Data".
	--> You bid your price against AWS pricing.
	Usercase : Testing / temporary environments.
	--> High config server, at low cost, with no affect for interruptions.. 

--> if AWS Price exceeds your bidding price, ec2 instance will be terminates.. 

--> Instance termination performed by AWS, Price changed.. You no need to pay for partial hours.. ( 1 hr 50 minutes --> AWS terminated --> 1 Hour)

--> Instance termination performed by User, Price unchanged.. You no need to pay for full hours.. ( 1 hr 50 minutes --> you terminated --> 1 Hour 50 minutes)

---

Step 1 : provide a name (Tag)

Tag --> Combination of key and value pair. We can provide metadata to our instance.

Step 2 : Need to choose AMI (Amazon Machine Image)

OS --> AMI

Step 3 : Instance Type (CPU, Memory)

Application : Demo-app

General Purpose : Balanced Compute, memory, netowking.. : t2, t3, t4g, m4, m5
CPU : CPU-Intensive Tasks : c4, c5
Memory : RAM : memory Optimised : Database, distributed web sale im-memory : r4, r5, x1, z1
Storage : Input and Output Operations per Second : nosql db, datawarehousing : d2, d3, i 
GPU Optimised : Machinelearning, Ai, Gaming.. f1, p , g

Step 4 : Create a keypair and use same.

Helps to get default username and password.

Step 5 : 

OS contains some ports : 

Windows : RDP (Remote Desktop protocol) : 3389 
Linux/unix : SSH (Secure shell) : 22

http : 80
https : 443
mysql : 3306
mssql : 1433
NFS : 2049

Source Type : 
1. Anywhere : 0.0.0.0/0 (Not recommended setting at enterprise level)
2. My IP : Your currently connected network IP address.
3. Custom : We can provide custom network IPs based on or/client requirement.


Step 6 : Storage : 
Windows 30 gb
Linux : 8 / 10 gb


Step 7 : Review and create

-------

How to connect:

Windows OS : 
1. Start --> search "Remote Desktop" --> open
2. Open "run" (windows key + r) --> type "mstsc" --> RDP tool
3. choose the instance "connect" --> RDP client --> Download remote desktop file --> open it

MacOS : navigate to "app store", Install "Microsft remote desktop"

---

Public IP : Unique across the globe : Avinash Reddy Thipparthi
Private IP : Unique with in the network : Chinna

---

telnet --> What is this and how this works.?? How to use this with ec2 instance for testing purpuses.!!

---


Linux : Open-Source System.. 

Sep, 1991 --> Linus Tarvalds

Open Source : Free to use, Modify and distribute.
Security : 
Stable : 
Cost-Effective : 
Performance : 


Linux Distribution:

General : Ubuntu, Fedora, Linux mint
Enterprise Level Server : RHEl (Redhat enterprise linux), SUSE Linux Enterprise Server / SLES, Oracle Linux
Community Server : CentOS, AlmaLinux
Pen Testing: kali linux, parrot OS
Light Weight : Puppy Linux

--

How to launch and Connect to Linux EC2 Instance.

--> AL2023 

EOS : End of Support --> We can still use it, (No updates, no support, no bug fixes)
EOL : End of Life --> We canot use after the give date. 


Default USer name : ec2-user


ssh -i awar-05-fa.pem username@server-ip

ssh -i awar-05-fa.pem ec2-user@13.203.66.42

==> Permisisons are too open.. 

chmod 400 awar-05-fa.pem

--

D: 02/09/2025


--> Create a backup copy of your volume.. 
--> Add addl storage at aws console level
--> Login to OS, "gxfs_rowfs" / "growpart", increase the volume size at OS level
--> Validate the changes.. Sanity Check.. 


1. Pre-Activity Steps : Take backup
2. Actual Activity : 
3. Post Activity steps 


Process to Follow: 

CRQ process : Change Request.. Increase the volume size / Change instance type.. 

CAB Meeting : Change Advisory Board.. 

Present our change.. Once it is approved.. 

--> Does this change require any downtime.? yes
--> Does this change impact customers.? 
--> How critical is this server is.? low, medium, high
--> When you are planning for this change.? Ans : Saturday Early hours.. 
--> What are the teams involved in change implementation.? Linux, AWS, Application Support.. 
--> Who will do the validations after the CRQ Window.? Ans: PS (Production Support).. Dev team.. 


t3.small --> t4g.large ==> 

RCA : Root Cause Analysis : Identifying the root cause of the issue.. 
PIR : Post Incident Report : After the incident is fixed, We prepare a report to take actions.. 
	--> Not to get same issue again.. 
	--> Alerting, is similar issue occurs
	--> Who is responsible to monitor, fix the issue.

---

Snapshot : backup copy of an ebs volume.. 

--> Snapshots are point-in-time copies.

---

Golden AMI : 

10 EC2 Instances 

Moniroting - datadog agent, site24x7 agent
security - prohance, anti virus
Corporate Software - genai, genie..
Dat to day - vim, telnet, pdf viewer, ms office.. 
Standards - OS Hardening, CIS benchmarks.. 


Option 1 : Launch 1 brand new instance at a time.. connect and configure.. Once confidine, go to 2nd instance and perform same.... 10th...

Option 2 : Launch 1 brand new instance first.. connect to it and configure it.. Once configuration completed, Validate it.. Then create it as a Template (Golden-AMI).. Then you can use this teamplete and launch n's ec2 instances..


EC2 --> Connect --> 2 gb vol add, httpd install and create custom webpage, tree package.. user add --> Create an AMI --> 
Launch a new instance from that AMI.. COnnect and verify.. 


/dev/nvme1n1

file -s /dev/nvme1n1

mkfs -t xfs /dev/nvme1n1

mkdir newvol

mount /dev/nvme1n1 newvol/

tail -n 1 /etc/mtab

---

EIP : Elastic IP Address : Gives a Dedicated IP address for our ec2 instance.
--> Default behaviour is "Public IP" will change when we perform stop and start of our ec2 instance.

Dedicated/Static Public IP to our instance using EIP.

AWS cost us for EIP. Attached/unatatched state.. 


13.235.241.174
35.154.250.197

13.202.142.58 - EIP
13.202.142.58

---

What does firewall do.?
It filters "incoming" and "outgoing" traffic. (filter = allow/deny)

SG's / Security Group act as a firewall at instance level.

Inbound Rules : Define what type of traffic should be allowed into ec2 instance. (SSH)
Outbound Rules : Define what type of traffic is allowed to access to the internet.

We always takes care about the "INBOUND RULES".

We have only Allow option, No Deny option availble. 

Ports We use comonly : 

SSH : 22
DNS : 53
HTTP : 80
HTTPS : 443
MYSQL : 3306
RDP : 3389
postgresql : 5432
MSSQL : 1433
NFS : 2049
http alternatives : 8080 / 8888 



We never open ssh/rdp open to the world.
If you want to delivering webpages (http/https) to the world, THen its obsolutely okat to open the traffic to everyone.

ssh : my-network
http: anywhere

------

Monitoring : Car dashboard.. Speed / fuel / rpm..
Observability : 90 km/p ++ --> Why that sound, it goes and fixes issue.. 

---

Cloudwatch is the core monitoring service provided by AWS. It enabled by deafulty and monitors our resources.

EC2: We have 2 types of monitorings..
--> Basic Monitoring : 5 minutes granualarity
--> Detailed Monitoring : 1 min granularity

--> CPU, Network, Storage metrics available by default. 
--> Memory metrics not available with default cw metrics. You need to install CW Agent to get RAM/Memory usage report.


---

When an ec2 instance is running with low CPU ( CPU <=20% for more than 5 minutes ), then i want to treat this as low usaged instance, want to stop it, also send a notification.

--> 


When an ec2 instance is running with high CPU ( CPU >=80% for more than 5 minutes ), then i want to treat this as high usaged instance, want to restart it, also send a notification.

---

SNS : Simple Notification Service : 
--> We have to create a topic, then we need to add subscribers to the topic. 
--> Subscriber have to confirm the subscription.

---


dnf install stree -y

nproc --> cpu count

stress --cpu 2 --timeout 600


---

--> We increase the resources : Vertical Scaling.. 
--> We add extra servers : Harizontal Scaling

vertical Scaling : If we are running our application, only in single ec2 instance.. If somthing happens..???

---

EFS : 

Support only Linux OS..
Wont work with Windows... Wondows has seperate protocol SMB and service FSx.. 
NFS v4.1
Network File System : 2049
No Pre-provisioning required
We have Unlimited Storage
Pay per usage

Performance Modes:
	--> General Purpose : Defualt.. Suitable for most of the workloads
	--> Max I/O : We can configure desired input and Output operations.
	
Throughput Modes :
	Bursting : It scales based on the load.
	Provisioning : Fixed throughput. 


EFS Require a security group.. Port : 2049.. 
We have to open Port 2049, And need to be avaibale to 

--> EC2 Instances has a Security group, Add that Security group ID (More Secure)
--> EC2 Instances with "Private IP" (Secure)
--> Entire VPC (Some what secured)
--> Entire World (Not at all secured)

---

sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 
fs-031202fdf06db4568.efs.ap-south-1.amazonaws.com:/ <mount-directory>

sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-031202fdf06db4568.efs.ap-south-1.amazonaws.com:/ sahred/


1. Create a directory and mount it in instance-1,.. create some data.. 
2. Create a directory and mount it in instance-2..  verify data.. 

---

Instance -1 : Install httpd and mount /var/www/html/ path to EFS
Instance -2 : Install httpd and mount /var/www/html/ path to EFS


dnf install httpd -y
systemctl enable httpd --now

sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-031202fdf06db4568.efs.ap-south-1.amazonaws.com:/ /var/www/html/

---

PG: Placement group : Help us to manage instance launch inside an AWS DC..

Cluster PG : All instance uses same hardware, same network, same power connectivity.. : Ultra low latency.. 

Partition PG : We can combine instances in a partition.. Every Partition has its own power connection, network connectivity.. 

Spread PG : Every instance will have its own power and network conenction.. it wont share power/network with other resources launched in same placement group.. 

---

[ENVIRONMENT]-[Platform]-[ServcieType]-[client-ID]-[01/02]

P-LNX-WEB-ICI-02

Environment:

P --> production
U --> UAT
Q --> QA
D --> Development
S --> Sandbox
T --> Training

Platform:

WIN --> Windows
LNX --> Linux

Servcie Type:

APP - Application Server 
DBS - Database Server
WEB - Web Server
FSR - File server
HDP - Hadoop distributed server
ADS - Activi Directory Server

Clients:

HDF
ICI
YES

----

AWS EventBridge : We can perform Event-Driven proceesess and Scheduled processes.. 





{"version":"0","id":"98eb2d02-e6e2-abc3-214f-11cfd7d3a085","detail-type":"EC2 Instance State-change Notification","source":"aws.ec2","account":"982424467695","time":"2025-09-06T04:51:41Z","region":"ap-south-1","resources":["arn:aws:ec2:ap-south-1:982424467695:instance/i-08aded6c9f7b09de8"],"detail":{"instance-id":"i-08aded6c9f7b09de8","state":"stopping"}}


{
   "version":"0",
   "id":"98eb2d02-e6e2-abc3-214f-11cfd7d3a085",
   "detail-type":"EC2 Instance State-change Notification",
   "source":"aws.ec2",
   "account":"982424467695",
   "time":"2025-09-06T04:51:41Z",
   "region":"ap-south-1",
   "resources":[
      "arn:aws:ec2:ap-south-1:982424467695:instance/i-08aded6c9f7b09de8"
   ],
   "detail":{
      "instance-id":"i-08aded6c9f7b09de8",
      "state":"stopping"
   }
}

---

Input Path mapping:

{
    "instance-id": "$.detail.instance-id",
    "state": "$.detail.state",
    "time": "$.time",
    "region": "$.region",
    "account": "$.account"
}

---

Input template:

"In this Account: <account>, We have an Instance in <region> with <instance-id> and at <time> it chnages its state to <state>"


---


Minutes : 0 - 59
Hours : 0 - 23
Day of Month : 1-31
Month : 1-12.. JAN-DEC
Day of week - SUN-SAT.. 1-7..
year - Year

* --> Any value
? --> No Specific Value
- --> from to to (mon-wed)
/ --> Step value (*/5 --> every 5th min)
, --> value1 and value2 (mon,web)

----

AWS CLI : 

aws s3 ls --profile account-1

Security Risks: This information stores in plain text format in our local laptop. If someone grabs, it.. security issue.. 


--> windows OS : c:/users/administrator(avinash)/ (you will see ".aws" folder) --> We will have 2 files (1. credentials and config)
--> Linux OS : Home directory (cd ~) --> ls -a (hidden)


--> Console 
--> CLI
--> Cloudformation
--> Terraform
--> Pulumi
--> AWS SDK/CDK

---

1. Download and Install AWS CLI tools.. https://aws.amaazon.com/cli  --> windows/Linux/Mac

https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html

2. Create an IAM User, (No need to enable "Management console" option, if you want to use this user dedicatedly for CLI operations)... Then Navigate to "Security credentials", create Accesskey and SecretAccesskey.

3. Open "Command prompt" / "Terminal" and run the following command

aws configure
Enter Accesskey :
Enter SecretACcess :
Enter Default Region : ap-south-1
Enter output format : table/text/json


aws sts get-caller-identity 			--> To identify as a what user you are working in CLI.

aws s3 ls 
aws ec2 describe-instances --region ap-south-1


---

commands syntax :  aws <service-name> <command> <arguments> <region> <outpur-format> 

aws s3 ls

aws s3 mb


# Create the IAM user
aws iam create-user --user-name avinash-cli-123

# Attach the S3FullAccess managed policy
aws iam attach-user-policy --user-name avinash-cli-123 --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess


---

aws s3 ls | awk '{print $3}

aws s3 ls 


---

aws iam list-users --query "Users[].UserName" --output text

---



laptop --> dev, uat, prd, training..??????

dev --> user
uat --> user
prd --> user

---

I want to use my laptop to access 2 or more diff environments simunt...


--profile

aws configure 			--> "Default" profile will create

aws configure --profile dev
Accesskey:
SecretKey:
region
output

aws configure --profile uat
Accesskey:
SecretKey:
region
output


aws s3 ls --profile dev

aws s3 ls --profile uat

---

aws ec2 describe-instances --query "Reservations[].Instances[].InstanceId" --profile uat

---

Launch an ec2 instance.. verify cli tools installation status.. then will try to access s3/iam/ec2.. 


s3 <-- IAM Role --> ec2

IAM Role --> 
1. Where you are going to use this role.. : ec2 / s3 / lambda / eb-scheduler.. 
2. What permissions you allow from the resource you are accessing.. : s3readonly.. 

---

How to perform switch role..

1. Login to the account, where you want to switch.. Create an IAM role.. While creating, choose "other account" --> provide your Existing/first/from-where-you-want-to-login account id.. Then provide the "policy".. then use the link of the IAM role generated for switch role operation..

2. Use this role utl from your account-1...

---

--> We can login to multiple aws acocunts in a single browser by enable "multi session support"..

---
































